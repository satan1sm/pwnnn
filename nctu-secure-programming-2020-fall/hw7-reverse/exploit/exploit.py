#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
'''
[HW 0X07] Going Crazy - NCTU SQLAB 309551004 王冠中
usage: gdb -batch-silent -x ./exploit.gdb ./gogo
'''
import sys
import gdb

class Exploit(gdb.Command):
    def __init__ (self):
        super(Exploit, self).__init__("exploit", gdb.COMMAND_SUPPORT)
        self.payload = [str(i) for i in range(36)]

    def invoke(self, arg, from_tty):
        print('[*] init...')
        gdb.execute('set pagination off')
        gdb.execute('set confirm off')
        gdb.execute('break *0x0048e6bd')
        gdb.execute('break *0x0048e70a')

        target_idx = 0
        for i in range(0, len(self.payload)):
            for num in range(32, 128):
                self.payload[target_idx] = str(num)
                self.prepare_payload()
                self.maybe_print_flag()
                gdb.execute('r < payload.txt > /dev/null')

                for k in range(i):
                    gdb.execute('c')
                    gdb.execute('c')

                # breakpoint 1: 0x0048e6bd (right before `call bezu()`)
                target_idx = self.get_current_idx()
                gdb.execute('c')

                # breakpoint 2: 0x0048e70a (right before `cmp rcx, rdx`)
                if self.are_rcx_edx_equal():
                    gdb.execute('c')
                    target_idx = self.get_current_idx()
                    break

    def prepare_payload(self):
        with open('payload.txt', 'w') as f:
            f.write('x' + ','.join(self.payload) + 'x')

    def maybe_print_flag(self):
        flag = ''.join([chr(int(n)) for n in self.payload])
        if flag.startswith('FLAG{'):
            sys.stderr.write(flag + '\n')

    def get_current_idx(self) -> int:
        gdb.execute('set logging file idx.txt')
        gdb.execute('set logging overwrite on')
        gdb.execute('set logging on')
        gdb.execute('printf "%d\\n",$rcx')
        gdb.execute('set logging off')
        with open('idx.txt', 'r') as f:
            current_idx = int(f.read())
        return current_idx

    def are_rcx_edx_equal(self) -> bool:
        gdb.execute('set logging file reg.txt')
        gdb.execute('set logging overwrite on')
        gdb.execute('set logging on')
        gdb.execute('printf "%d\\n",$rcx')
        gdb.execute('printf "%d\\n",$rdx')
        gdb.execute('set logging off')
        with open('reg.txt', 'r') as f:
            rcx, rdx = f.read().split()
        return rcx == rdx

Exploit()
